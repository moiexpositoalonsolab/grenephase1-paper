#!/usr/bin/env python
# coding: utf-8

# This script is designed for data wrangling to prepare genomic and association data
# for analysis using the 'topr' package in R. 'topr' is typically used for
# functional enrichment analysis based on genomic regions or gene sets and their
# associated p-values or statistics.

# The script processes GFF3 annotation files and various GWAS/association study results
# (GEMMA, LFMM, Kendall's tau, Binomial Regression) and formats them appropriately
# for input into the 'topr' R package.

# --- Required Input Files ---
# - A GFF3 annotation file (e.g., '../key_files/TAIR10_GFF3_genes_transposons.gff')
# - Intermediate formatted GFF3 file ('../key_files/TAIR10_GFF3_genes_transposons_formatted4topr.csv') - likely generated by a previous run or part of this script.
# - Additional annotation file ('tair_annotations_topr.tsv').
# - GWAS results from GEMMA (e.g., '/carnegie/nobackup/scratch/tbellagio/gea_grene-net/gwas/allele_assoc_runs/lmm_gemma/bio1/output/results_lmm_maf.csv', from both 1137 and 231 genomes analyses).
# - Association results from LFMM (e.g., '/carnegie/nobackup/scratch/tbellagio/gea_grene-net/lfmm_full_last_gen/lfmm_fullresults_all_k/lfmm_bio1_k16_results.csv').
# - Association results from Kendall's tau correlation (e.g., '/carnegie/nobackup/scratch/tbellagio/gea_grene-net/kendall_tau_last_gen/kendall_corr_bio1.csv').
# - Association results from Binomial Regression (e.g., '/carnegie/nobackup/scratch/tbellagio/gea_grene-net/binomial_regression_lastgen/binomial_reg_lastgen_wmaf_bio1.csv').

# --- Output Files ---
# - Simplified GFF file with protein-coding genes ('../key_files/TAIR10_GFF3_genes.gff').
# - Updated 'tair_annotations_topr.tsv' file.
# - Processed GEMMA 1137 genomes results for topr ('gemma1137_bio1_4topr.csv').
# - Processed GEMMA 231 genomes results for topr ('gemma231_bio1_4topr.csv').
# - Processed LFMM results for topr ('lfmm_bio1_4topr_last_gen.csv').
# - Processed Kendall's tau results for topr ('kendall_bio1_4topr_last_gen.csv').
# - Processed Binomial Regression results for topr ('binom_bio1_4topr_last_gen.csv').

# --- Import Libraries ---

import pandas as pd
import numpy as np
from collections import defaultdict
import pickle
import dask.dataframe as dd
import seaborn as sns
import matplotlib.pyplot as plt
import random


# Load the original GFF3 file containing gene and transposon annotations.
# The file is tab-separated and has no header.
og = pd.read_csv('../key_files/TAIR10_GFF3_genes_transposons.gff', sep = '\t', header=None)


# Filter the GFF3 data to keep only lines that describe 'protein_coding_gene'.
# This is done by checking if the 9th column (index 8), which contains attributes,
# includes the string 'protein_coding_gene'.
og = og[og[8].str.contains('protein_coding_gene')]


# Save the filtered protein-coding gene entries to a new GFF file.
# This creates a simplified annotation file focusing only on protein-coding genes.
# This file might be used as a gene set definition in 'topr'.
og.to_csv('../key_files/TAIR10_GFF3_genes.gff', sep = '\t', header=None, index=None)


# Load a previously formatted GFF3 file. This file likely contains gene annotations
# with aggregated exon information, formatted in a way suitable for 'topr'.
gff3_formatted = pd.read_csv('../key_files/TAIR10_GFF3_genes_transposons_formatted4topr.csv')


# Drop an unnecessary column, commonly created when saving/loading DataFrames to/from CSV.
gff3_formatted = gff3_formatted.drop('Unnamed: 0',axis=1)


# Display data types of the columns in the formatted GFF3 DataFrame.
# This is likely for verification or debugging purposes.
gff3_formatted.dtypes


# Load another annotation file, potentially containing additional information or mappings
# relevant for the 'topr' analysis.
new = pd.read_csv('tair_annotations_topr.tsv', sep='\t')


# Filter this new annotation file to include only entries from chromosomes 1 through 5.
new = new[new['chrom'].isin(['Chr1', 'Chr2', 'Chr3', 'Chr4', 'Chr5'])]


# Reformat chromosome names, removing the 'Chr' prefix and converting to integer type.
# This ensures consistent chromosome representation.
new['chrom'] = new['chrom'].str.replace('Chr', '').astype(int)


# Save the processed annotation file back to its original location.
# This updates the 'tair_annotations_topr.tsv' file with the filtered and reformatted data.
new.to_csv('tair_annotations_topr.tsv', sep='\t', index=None)


# Load GWAS results from GEMMA analysis using the 1137 genomes dataset for bio1 (mean annual temperature).
# This file contains association p-values.
pvalues_gemma = pd.read_csv('/carnegie/nobackup/scratch/tbellagio/gea_grene-net/gwas/allele_assoc_runs/lmm_gemma/bio1/output/results_lmm_maf.csv')


# Extract chromosome and position from the 'rs' column, which is likely in 'CHROM_POS' format.
pvalues_gemma['CHROM'] = pvalues_gemma['rs'].str.split('_').str[0]
pvalues_gemma['POS'] = pvalues_gemma['rs'].str.split('_').str[1]


# Select the relevant columns: p-value ('p_wald') and the extracted chromosomal coordinates.
pvalues_gemma = pvalues_gemma[['p_wald', 'CHROM', 'POS']]


# Rename columns to match the expected format for 'topr' (p-value column named 'P').
pvalues_gemma.columns = ['P', 'CHROM', 'POS' ]


# Save the processed GEMMA 1137 genomes results to a CSV file.
# This file is now ready for use as input in the 'topr' R package.
pvalues_gemma.to_csv(f'gemma1137_bio1_4topr.csv',index=None)


# Load GWAS results from GEMMA analysis using only the greneNet samples (231 genomes) for bio1.
# This processes association results from a smaller sample size.
pvalues_gemma = pd.read_csv('/carnegie/nobackup/scratch/tbellagio/gea_grene-net/gwas/allele_assoc_runs/only_grenenet/lmm_gemma/bio1/output/results_lmm_maf.csv')


# Extract chromosome and position from the 'rs' column for the 231 genomes results.
pvalues_gemma['CHROM'] = pvalues_gemma['rs'].str.split('_').str[0]
pvalues_gemma['POS'] = pvalues_gemma['rs'].str.split('_').str[1]


# Select relevant columns for the 231 genomes results.
pvalues_gemma = pvalues_gemma[['p_wald', 'CHROM', 'POS']]


# Rename columns for consistency with 'topr' requirements.
pvalues_gemma.columns = ['P', 'CHROM', 'POS' ]


# Save the processed GEMMA 231 genomes results to a CSV file for 'topr'.
pvalues_gemma.to_csv(f'gemma231_bio1_4topr.csv',index=None)


# Load LFMM results for bio1 from the last generation data.
# This is the actual LFMM results file being used in this script.
pvalues_lfmm = f'/carnegie/nobackup/scratch/tbellagio/gea_grene-net/lfmm_full_last_gen/lfmm_fullresults_all_k/lfmm_bio1_k16_results.csv'
pvalues_lfmm = pd.read_csv(pvalues_lfmm)


# Select and reformat LFMM results for 'topr'.
# Extracts 'snp_id' and 'p_value' columns.
# Parses 'snp_id' to get CHROM and POS.
# Reorders columns and renames p-value column to 'P'.
lfmm_result_4topr = pvalues_lfmm[['snp_id', 'p_value']]

lfmm_result_4topr['CHROM'] = lfmm_result_4topr['snp_id'].str.split('_').str[0]
lfmm_result_4topr['POS'] = lfmm_result_4topr['snp_id'].str.split('_').str[1]

lfmm_result_4topr = lfmm_result_4topr[['p_value', 'CHROM', 'POS']]

lfmm_result_4topr.columns = ['P', 'CHROM', 'POS' ]
# Filter results based on a p-value threshold (commented out example).
#lfmm_result_4topr = lfmm_result_4topr[lfmm_result_4topr['P'] < 0.0001]
lfmm_result_4topr.to_csv(f'lfmm_bio1_4topr_last_gen.csv',index=None)


# Load Kendall's tau correlation results for bio1 from the last generation data.
pvalues_kendall = f'/carnegie/nobackup/scratch/tbellagio/gea_grene-net/kendall_tau_last_gen/kendall_corr_bio1.csv'
pvalues_kendall = pd.read_csv(pvalues_kendall)


# Select relevant columns: Kendall's tau p-value ('K_tau_p'), chromosome ('chrom'), and position ('pos').
pvalues_kendall = pvalues_kendall[['K_tau_p', 'chrom', 'pos']]


# Rename columns for consistency with 'topr' requirements.
pvalues_kendall.columns = ['P', 'CHROM', 'POS' ]


# Ensure the position column is of integer type.
pvalues_kendall['POS'] = pvalues_kendall['POS'].astype(int)


# Filter results based on a p-value threshold (commented out example).
# #pvalues_kendall = pvalues_kendall[pvalues_kendall['P'] < 0.0001]


# Save the processed Kendall's tau results to a CSV file for 'topr'.
pvalues_kendall.to_csv(f'kendall_bio1_4topr_last_gen.csv',index=None)


# Load Binomial Regression results for bio1 from the last generation data.
pvalues_binom = f'/carnegie/nobackup/scratch/tbellagio/gea_grene-net/binomial_regression_lastgen/binomial_reg_lastgen_wmaf_bio1.csv'
pvalues_binom = pd.read_csv(pvalues_binom)


# Extract chromosome and position from the 'snp_id' column.
pvalues_binom['CHROM'] = pvalues_binom['snp_id'].str.split('_').str[0]
pvalues_binom['POS'] = pvalues_binom['snp_id'].str.split('_').str[1]


# Select relevant columns: p-value ('pvalue') and chromosomal coordinates.
pvalues_binom = pvalues_binom[['pvalue', 'CHROM', 'POS']]


# Rename columns for consistency with 'topr' requirements.
pvalues_binom.columns = ['P', 'CHROM', 'POS' ]


# Ensure the position column is of integer type.
pvalues_binom['POS'] = pvalues_binom['POS'].astype(int)


# Save the processed Binomial Regression results to a CSV file for 'topr'.
pvalues_binom.to_csv('binom_bio1_4topr_last_gen.csv',index=None)


# Filter binomial regression results based on a p-value threshold (commented out example).
# #pvalues_binom = pvalues_binom[pvalues_binom['P'] < 0.0001]
